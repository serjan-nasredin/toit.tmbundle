%YAML 1.2
---
# Syntax: sublimetext.com/docs/syntax.html
# Documentation: docs.toit.io/language

name: Toit
file_extensions: [toit]
file_line_match: |-
  (?xi:
    ^\#!(?:.*[\/ ])?toit(?:\.?vm)?$ # shebang
  )
scope: source.toit

variables:
  ident: \b(?<var>\w+)\s*=\s*(?<value>(?<q>["'`])(?<str>[^\k<q>]*?)\k<q>|(?<digit>\d+)|(?<bool>true|false))\b
  identifier_constant: '\b(?:[\p{Lu}_][\p{Lu}_\d]*)?[\p{Lu}]{2,}[\p{Lu}_\d]*\b'
  illegal_names: (?:if|else|for|while|break|continue|import|as|return|not|class|is|not)
  before_tag: \b(class)\b
  control_keywords: \b(if|else|for|while|constructor|unreachable)\b
  builtin_functions: \b(?x:print|super|any)\b
  builtin_types: \b(?x:int|string|bool|float)\b
  non_func_keywords: \b(if|else\s+if|else|for|while|constructor|unreachable)\b

contexts:
  main:
    # - include: comment
    - include: comment-single-line
    - include: comment-multi-line
    - include: class
    - include: interface
    # - include: string
    - include: string-double
    - include: string-single
    - include: keyword
    - include: number
    - include: literal
    - include: operator
    - include: constant
    - include: method
    - include: punctuation
    - include: import
    - include: export
    - include: built-in
    - include: shebang

  comment-single-line:
    - match: //
      scope: punctuation.definition.comment.toit
      push:
        - meta_scope: comment.line.toit
        - match: $\n?
          pop: true

  comment-multi-line:
    - match: /\*
      scope: punctuation.definition.comment.begin.toit
      push:
        - meta_scope: comment.block.toit
        - match: \*/
          scope: punctuation.definition.comment.end.toit
          pop: true
        - match: '^\s*(\*)(?!/)'
          captures:
            0: punctuation.definition.comment.toit
    - include: comment-error

  comment-error:
    - match: '(\*/)'
      scope: invalid.illegal.toit

  # method-argument:
    # match: '([a-z]+([A-Z_0-9]+)+)'
    # scope: variable.parameter.toit

  # method-name:
    # match: '([a-z]+([A-Z_0-9]+)+)'
    # scope: entity.name.function.toit

  # class-name:
    # match: '([A-Z]+([a-z_0-9]+)+)'
    # scope: keyword

  # extend:
    # match: \bextends\b
    # scope: keyword

  shebang:
    - match: '^\#!'
      scope: punctuation.definition.comment.toit
      push:
        - meta_scope: comment.line.toit
        - match: '(?:.*[\/ ])?(toit(?:\.?vm)?)$'
          captures:
            0: comment.block.toit
            1: constant.language.shebang.toit
        - match: $\n?
          pop: true

  string-single:
    - match: \'
      scope: punctuation.definition.string.begin.toit
      push:
        - meta_scope: string.quoted.double.toit
        - match: \\.
          scope: constant.character.escape.toit
        - match: \'
          scope: punctuation.definition.string.end.toit
          pop: true

  string-double:
    - match: '"'
      scope: punctuation.definition.string.begin.toit
      push:
        - meta_scope: string.quoted.double.toit
        - match: \\.
          scope: constant.character.escape.toit
        - match: '"'
          scope: punctuation.definition.string.end.toit
          pop: true

  operator:
    - match: '([+*/%-:&|^]|<<|>>>?)='
      scope: keyword.operator.assignment
    - match: '[+*/%-]'
      scope: keyword.operator.arithmetic
    - match: '\!|\&\&|\|\|'
      scope: keyword.operator.logical
    - match: '[~&|^]|<<|>>>?'
      scope: keyword.operator.bitwise
    - match: ':=|::='
      scope: punctuation.separator.key-value.colon.toit

  punctuation:
    - match: \.
      scope: punctuation.delimiter.period.dot.toit
    - match: \,
      scope: punctuation.delimiter.comma.toit
    - match: \;
      scope: punctuation.definition.other.semicolon.toit
    - match: ':'
      scope: punctuation.separator.key-value.colon.toit
    - match: \(
      scope: punctuation.section.parens.begin.toit
    - match: \)
      scope: punctuation.section.parens.end.toit
    - match: \[
      scope: punctuation.section.brackets.begin.toit
    - match: \]
      scope: punctuation.section.brackets.end.toit
    - match: \?
      scope: punctuation.definition.other.questionmark.toit

  number:
    - match: (?:(?:[-]?)(?:[0-9e]*)(?:\.{1}){1}(?:[0-9]+))
      scope: constant.numeric.float.decimal.toit
    - match: \b(?:0[xX])(?:[0-9a-fA-F]+)
      scope: constant.numeric.hex.toit
    - match: \b(?:[-]?)(?:[0-9]+)
      scope: constant.numeric.integer.decimal.toit

  literal:
    - match: \b(true|false)\b
      scope: constant.language.boolean.toit
    - match: \b(null|none)\b
      scope: constant.language.nan.toit

  type:
    - match: \b(int|float|string|bool)\b
      scope: storage.type.toit

  logical:
    - match: \b(break|continue)\b
      scope: keyword.control.toit

  built-in:
    - match: \b(print|join|super)\b
      scope: support.function.toit

  keyword:
    - include: type
    - include: logical
    - match: \b(unreachable)\b
      scope: keyword.control.toit
    - match: \b(for|while|return)\b
      scope: keyword.control.toit
    - match: \b(if|else|constructor)\b
      scope: keyword.control.conditional.toit
    - match: \b(import|export)\b
      scope: keyword.control.import.toit
    - match: \b(this|as|show)\b
      scope: keyword.import.from.toit
    - match: \b(static)\b
      scope: storage.modifier.toit
    - match: \b(abstract|class|extends|interface|operator|implements|monitor)\b
      scope: keyword.toit

  class:
    - match: '^(?:(abstract|))\s*(class)\s+([A-Za-z0-9]{1,})(?:\s*(extends|))(?:\s*([A-Za-z0-9]{1,}|)):?$\n?'
      captures:
        0: meta.class.toit
        1: keyword
        2: keyword.declaration.class.toit
        3: support.class.toit
        4: keyword
        5: support.class.toit

  method:
    - match: '(^\s*[a-zA-Z_0-9]{1,})\s*?(?:{{ident}}|):(?!:)(?!=)'
      captures:
        0: meta.toit
        1: entity.name.function.toit
        2: variable.toit

  interface:
    - match: '^(interface)\s*([A-Za-z0-9]{1,})(?:\s+(extends)|)(?:\s+([A-Za-z0-9]{1,})|)(?:\s+(implements)|)(?:\s+([A-Za-z0-9]{1,})|):?'
      captures:
        0: meta.interface.toit
        1: keyword
        2: support.class.toit
        3: keyword
        4: support.class.toit
        5: keyword
        6: support.class.toit

  import:
    - match: '^\s*(import)\s+([a-z_0-9]+)(?:\s+(as|show))(?:\s+((\*)|w+))$'
      captures:
        0: meta.import.toit
        1: keyword
        2: entity.name.import.toit
        3: keyword
        4: entity.name.import.toit
        5: constant.toit

  export:
    - match: '^\s*(export)\s+(.*?)$'
      captures:
        0: meta.import.toit
        1: keyword
        2: entity.name.import.toit

  constant:
    - match: '\b(?:[\p{Lu}_][\p{Lu}_\d]*)?[\p{Lu}]{2,}[\p{Lu}_\d]*\b'
      scope: variable.other.constant.toit
